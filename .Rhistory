percentageLastWeek <- merge(percentageLastWeek, percentageWeekBeforeLast, by = "story_id")
percentageLastWeek <- percentageLastWeek[, .(percentage_growth_7days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
percentageLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastMonth <- merge(percentageLastMonth, percentageMonthBeforeLast, by = "story_id")
percentageLastMonth <- percentageLastMonth[, .(percentage_growth_30days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
datamart <- merge(datamart, percentageLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, percentageLastMonth, by = "story_id", all.x = TRUE)
#Total return rate in last 7 days
#Total return rate in last 30 days
visitorsWeekBeforeLast <- maindt[date > (last_date_of_dataset - 14) & date <= (last_date_of_dataset - 7)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastWeek <- maindt[date > (last_date_of_dataset - 7)]
visitorsLastWeek <- visitorsLastWeek[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastWeek[visitor_new %in% visitorsWeekBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate7Days <- merge(visitorsWeekBeforeLast, intercept, by = "story_id")
returnRate7Days <- returnRate7Days[,.(return_rate_7days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
visitorsMonthBeforeLast <- maindt[date > (last_date_of_dataset - 60) & date <= (last_date_of_dataset - 30)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastMonth <- maindt[date > (last_date_of_dataset - 30)]
visitorsLastMonth <- visitorsLastMonth[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastMonth[visitor_new %in% visitorsMonthBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate30Days <- merge(visitorsMonthBeforeLast, intercept, by = "story_id")
returnRate30Days <- returnRate30Days[,.(return_rate_30days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
datamart <- merge(datamart, returnRate7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, returnRate30Days, by = "story_id", all.x = TRUE)
#Total visitors - visits
totalVisitors <- minDate[,.(total_visitors = .N, total_events = sum(total_events)), by = .(story_id)]
totalVisits <- maindt[,.(count = .N), by = .(story_id, visit_id)][,.(total_visits = .N), by = .(story_id)]
datamart <- merge(datamart, totalVisitors, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, totalVisits, by = "story_id", all.x = TRUE)
#Total chapter started
#Total chapter completed/Total chapter started
totalChapterStarted <- maindt[percentage == 20, .(total_chap_start = .N), by = .(story_id)]
totalChapterStarted <- merge(totalChapterStarted, maindt[percentage == 100, .(total_chap_complete = .N), by = .(story_id)], by = "story_id")
totalChapterStarted <- totalChapterStarted[, .(total_chap_start = total_chap_start, complete_start_ratio = round(total_chap_complete*100/total_chap_start, 2)), by = .(story_id)]
datamart <- merge(datamart, totalChapterStarted, by = "story_id", all.x = TRUE)
#Average events/visitors
#Average events/visit
aveEvents <- merge(totalVisitors, totalVisits, by = "story_id")
aveEvents <- aveEvents[, .(ave_event_visitor = total_events/total_visitors, ave_event_visit = total_events/total_visits), by = .(story_id)]
datamart <- merge(datamart, aveEvents, by = "story_id", all.x = TRUE)
#Estimated active visitors (visitors with no. of events > average events/visitors)
estActiveVisitor <- minDate[total_events > mean(total_events), .(active_visitor = .N), by = .(story_id)]
#Estimated keen visitors (visitors with no. of chapter completed > 50% of available chapters)
estKeenVisitor <- maindt[, .(max_per = max(percentage)), by = .(story_id, visitor_id, chapter_number)]
estKeenVisitor <- estKeenVisitor[max_per == 100][, .(total_chap = .N, avail_chap = max(chapter_number)), by = .(story_id, visitor_id)]
estKeenVisitor <- estKeenVisitor[total_chap > avail_chap * .5][, .(keen_visitor = .N), by = .(story_id)]
#Estimated bounce visitors (visitors with no completion and idle time > 1 month)
estBounceVisitor <- maindt[, .(max_per = max(percentage), max_date = max(date)), by = .(story_id, visitor_id)]
estBounceVisitor <- estBounceVisitor[max_per < 100 & max_date < (last_date_of_dataset - 30)][, .(bounce_visitor = .N), by = .(story_id)]
visitorProfile <- merge(estActiveVisitor, estKeenVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, estBounceVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, totalVisitors, by = "story_id")
visitorProfile <- visitorProfile[,.(active_visitor = round(active_visitor*100/total_visitors, 2), keen_visitor = round(keen_visitor*100/total_visitors, 2), bounce_visitor = round(bounce_visitor*100/total_visitors), 2), by = .(story_id)]
datamart <- merge(datamart, visitorProfile, by = "story_id", all.x = TRUE)
#Idle rate
idleRate <- maindt[, .(count = .N), by = .(story_id, date)][,.(total_active_date = .N, min_date = min(date)), by = .(story_id)]
idleRate <- idleRate[, .(idle_rate = round((1 - total_active_date/as.integer(last_date_of_dataset - min_date))*100, 2)), by = .(story_id)]
datamart <- merge(datamart, idleRate, by = "story_id", all.x = TRUE)
#Save datamart
write.csv(datamart, "/Users/tran/Desktop/Projects/Inkitt/datamart.csv")
options(digits.secs=6)
options(digits=2)
maindt <- rawdt
maindt$time <- as.POSIXct(strptime(maindt$time, "%Y-%m-%d %H:%M:%OS"), tz = "GMT")
maindt$date <- as.Date(maindt$time)
#last date of dataset (used in calculation)
last_date_of_dataset <- max(maindt$date)
listStory <- data.table(unique(maindt$story_id))
names(listStory) <- c("story_id")
#Start date
startDate <- maindt[, .(start_date = min(date)), by = story_id]
datamart <- merge(listStory, startDate, by = "story_id", all.x = TRUE)
#Average visitors in last 7 days
#Average visitors in last 30 days
#Average visitors in last 90 days
aveVisitors7Days <- maindt[date > (last_date_of_dataset - 7), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors7Days <- aveVisitors7Days[, .(ave_visitors_7days = .N/7), by = .(story_id)]
aveVisitors30Days <- maindt[date > (last_date_of_dataset - 30), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors30Days <- aveVisitors30Days[, .(ave_visitors_30days = .N/30), by = .(story_id)]
aveVisitors90Days <- maindt[date > (last_date_of_dataset - 90), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors90Days <- aveVisitors90Days[, .(ave_visitors_90days = .N/90), by = .(story_id)]
datamart <- merge(datamart, aveVisitors7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, aveVisitors30Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, aveVisitors90Days, by = "story_id", all.x = TRUE)
#Acquire growth in last 7 days
#Acquire growth in last 30 days
minDate <- maindt[, .(total_events = .N, total_percentage = sum(percentage), min_date = min(date)), by = .(story_id, visitor_id)]
newVisitorsLastWeek <- minDate[min_date > (last_date_of_dataset - 7)][, .(new_visitors_new = .N), by = .(story_id)]
newVisitorsWeekBeforeLast <- minDate[min_date > (last_date_of_dataset - 14) & min_date <= (last_date_of_dataset - 7)][, .(new_visitors_old = .N), by = .(story_id)]
newVisitorsLastWeek <- merge(newVisitorsLastWeek, newVisitorsWeekBeforeLast, by = "story_id")
newVisitorsLastWeek <- newVisitorsLastWeek[, .(acq_growth_7days = round((new_visitors_new-new_visitors_old)*100/new_visitors_old, 2)), by = .(story_id)]
newVisitorsLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(new_visitors_new = .N), by = .(story_id)]
newVisitorsMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(new_visitors_old = .N), by = .(story_id)]
newVisitorsLastMonth <- merge(newVisitorsLastMonth, newVisitorsMonthBeforeLast, by = "story_id")
newVisitorsLastMonth <- newVisitorsLastMonth[, .(acq_growth_30days = round((new_visitors_new-new_visitors_old)*100/new_visitors_old), 2), by = .(story_id)]
datamart <- merge(datamart, newVisitorsLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, newVisitorsLastMonth, by = "story_id", all.x = TRUE)
#Total percentage growth in last 7 days
#Total percentage growth in last 30 days
percentageLastWeek <- minDate[min_date > (last_date_of_dataset - 7)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageWeekBeforeLast <- minDate[min_date > (last_date_of_dataset - 14) & min_date <= (last_date_of_dataset - 7)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastWeek <- merge(percentageLastWeek, percentageWeekBeforeLast, by = "story_id")
percentageLastWeek <- percentageLastWeek[, .(percentage_growth_7days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
percentageLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastMonth <- merge(percentageLastMonth, percentageMonthBeforeLast, by = "story_id")
percentageLastMonth <- percentageLastMonth[, .(percentage_growth_30days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
datamart <- merge(datamart, percentageLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, percentageLastMonth, by = "story_id", all.x = TRUE)
#Total return rate in last 7 days
#Total return rate in last 30 days
visitorsWeekBeforeLast <- maindt[date > (last_date_of_dataset - 14) & date <= (last_date_of_dataset - 7)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastWeek <- maindt[date > (last_date_of_dataset - 7)]
visitorsLastWeek <- visitorsLastWeek[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastWeek[visitor_new %in% visitorsWeekBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate7Days <- merge(visitorsWeekBeforeLast, intercept, by = "story_id")
returnRate7Days <- returnRate7Days[,.(return_rate_7days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
visitorsMonthBeforeLast <- maindt[date > (last_date_of_dataset - 60) & date <= (last_date_of_dataset - 30)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastMonth <- maindt[date > (last_date_of_dataset - 30)]
visitorsLastMonth <- visitorsLastMonth[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastMonth[visitor_new %in% visitorsMonthBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate30Days <- merge(visitorsMonthBeforeLast, intercept, by = "story_id")
returnRate30Days <- returnRate30Days[,.(return_rate_30days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
datamart <- merge(datamart, returnRate7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, returnRate30Days, by = "story_id", all.x = TRUE)
#Total visitors - visits
totalVisitors <- minDate[,.(total_visitors = .N, total_events = sum(total_events)), by = .(story_id)]
totalVisits <- maindt[,.(count = .N), by = .(story_id, visit_id)][,.(total_visits = .N), by = .(story_id)]
datamart <- merge(datamart, totalVisitors, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, totalVisits, by = "story_id", all.x = TRUE)
#Total chapter started
#Total chapter completed/Total chapter started
totalChapterStarted <- maindt[percentage == 20, .(total_chap_start = .N), by = .(story_id)]
totalChapterStarted <- merge(totalChapterStarted, maindt[percentage == 100, .(total_chap_complete = .N), by = .(story_id)], by = "story_id")
totalChapterStarted <- totalChapterStarted[, .(total_chap_start = total_chap_start, complete_start_ratio = round(total_chap_complete*100/total_chap_start, 2)), by = .(story_id)]
datamart <- merge(datamart, totalChapterStarted, by = "story_id", all.x = TRUE)
#Average events/visitors
#Average events/visit
aveEvents <- merge(totalVisitors, totalVisits, by = "story_id")
aveEvents <- aveEvents[, .(ave_event_visitor = total_events/total_visitors, ave_event_visit = total_events/total_visits), by = .(story_id)]
datamart <- merge(datamart, aveEvents, by = "story_id", all.x = TRUE)
#Estimated active visitors (visitors with no. of events > average events/visitors)
estActiveVisitor <- minDate[total_events > mean(total_events), .(active_visitor = .N), by = .(story_id)]
#Estimated keen visitors (visitors with no. of chapter completed > 50% of available chapters)
estKeenVisitor <- maindt[, .(max_per = max(percentage)), by = .(story_id, visitor_id, chapter_number)]
estKeenVisitor <- estKeenVisitor[max_per == 100][, .(total_chap = .N, avail_chap = max(chapter_number)), by = .(story_id, visitor_id)]
estKeenVisitor <- estKeenVisitor[total_chap > avail_chap * .5][, .(keen_visitor = .N), by = .(story_id)]
#Estimated bounce visitors (visitors with no completion and idle time > 1 month)
estBounceVisitor <- maindt[, .(max_per = max(percentage), max_date = max(date)), by = .(story_id, visitor_id)]
estBounceVisitor <- estBounceVisitor[max_per < 100 & max_date < (last_date_of_dataset - 30)][, .(bounce_visitor = .N), by = .(story_id)]
visitorProfile <- merge(estActiveVisitor, estKeenVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, estBounceVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, totalVisitors, by = "story_id")
visitorProfile <- visitorProfile[,.(active_visitor = round(active_visitor*100/total_visitors, 2), keen_visitor = round(keen_visitor*100/total_visitors, 2), bounce_visitor = round(bounce_visitor*100/total_visitors), 2), by = .(story_id)]
datamart <- merge(datamart, visitorProfile, by = "story_id", all.x = TRUE)
#Idle rate
idleRate <- maindt[, .(count = .N), by = .(story_id, date)][,.(total_active_date = .N, min_date = min(date)), by = .(story_id)]
idleRate <- idleRate[, .(idle_rate = round((1 - total_active_date/as.integer(last_date_of_dataset - min_date))*100, 2)), by = .(story_id)]
datamart <- merge(datamart, idleRate, by = "story_id", all.x = TRUE)
#Save datamart
write.csv(datamart, "/Users/tran/Desktop/Projects/Inkitt/datamart.csv")
options(digits.secs=6)
maindt <- rawdt
maindt$time <- as.POSIXct(strptime(maindt$time, "%Y-%m-%d %H:%M:%OS"), tz = "GMT")
maindt$date <- as.Date(maindt$time)
#last date of dataset (used in calculation)
last_date_of_dataset <- max(maindt$date)
listStory <- data.table(unique(maindt$story_id))
names(listStory) <- c("story_id")
#Start date
startDate <- maindt[, .(start_date = min(date)), by = story_id]
datamart <- merge(listStory, startDate, by = "story_id", all.x = TRUE)
#Average visitors in last 7 days
#Average visitors in last 30 days
#Average visitors in last 90 days
aveVisitors7Days <- maindt[date > (last_date_of_dataset - 7), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors7Days <- aveVisitors7Days[, .(ave_visitors_7days = round(.N/7, 2)), by = .(story_id)]
aveVisitors30Days <- maindt[date > (last_date_of_dataset - 30), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors30Days <- aveVisitors30Days[, .(ave_visitors_30days = round(.N/30, 2)), by = .(story_id)]
aveVisitors90Days <- maindt[date > (last_date_of_dataset - 90), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors90Days <- aveVisitors90Days[, .(ave_visitors_90days = round(.N/90, 2)), by = .(story_id)]
datamart <- merge(datamart, aveVisitors7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, aveVisitors30Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, aveVisitors90Days, by = "story_id", all.x = TRUE)
#Acquire growth in last 7 days
#Acquire growth in last 30 days
minDate <- maindt[, .(total_events = .N, total_percentage = sum(percentage), min_date = min(date)), by = .(story_id, visitor_id)]
newVisitorsLastWeek <- minDate[min_date > (last_date_of_dataset - 7)][, .(new_visitors_new = .N), by = .(story_id)]
newVisitorsWeekBeforeLast <- minDate[min_date > (last_date_of_dataset - 14) & min_date <= (last_date_of_dataset - 7)][, .(new_visitors_old = .N), by = .(story_id)]
newVisitorsLastWeek <- merge(newVisitorsLastWeek, newVisitorsWeekBeforeLast, by = "story_id")
newVisitorsLastWeek <- newVisitorsLastWeek[, .(acq_growth_7days = round((new_visitors_new-new_visitors_old)*100/new_visitors_old, 2)), by = .(story_id)]
newVisitorsLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(new_visitors_new = .N), by = .(story_id)]
newVisitorsMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(new_visitors_old = .N), by = .(story_id)]
newVisitorsLastMonth <- merge(newVisitorsLastMonth, newVisitorsMonthBeforeLast, by = "story_id")
newVisitorsLastMonth <- newVisitorsLastMonth[, .(acq_growth_30days = round((new_visitors_new-new_visitors_old)*100/new_visitors_old), 2), by = .(story_id)]
datamart <- merge(datamart, newVisitorsLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, newVisitorsLastMonth, by = "story_id", all.x = TRUE)
#Total percentage growth in last 7 days
#Total percentage growth in last 30 days
percentageLastWeek <- minDate[min_date > (last_date_of_dataset - 7)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageWeekBeforeLast <- minDate[min_date > (last_date_of_dataset - 14) & min_date <= (last_date_of_dataset - 7)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastWeek <- merge(percentageLastWeek, percentageWeekBeforeLast, by = "story_id")
percentageLastWeek <- percentageLastWeek[, .(percentage_growth_7days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
percentageLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastMonth <- merge(percentageLastMonth, percentageMonthBeforeLast, by = "story_id")
percentageLastMonth <- percentageLastMonth[, .(percentage_growth_30days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
datamart <- merge(datamart, percentageLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, percentageLastMonth, by = "story_id", all.x = TRUE)
#Total return rate in last 7 days
#Total return rate in last 30 days
visitorsWeekBeforeLast <- maindt[date > (last_date_of_dataset - 14) & date <= (last_date_of_dataset - 7)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastWeek <- maindt[date > (last_date_of_dataset - 7)]
visitorsLastWeek <- visitorsLastWeek[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastWeek[visitor_new %in% visitorsWeekBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate7Days <- merge(visitorsWeekBeforeLast, intercept, by = "story_id")
returnRate7Days <- returnRate7Days[,.(return_rate_7days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
visitorsMonthBeforeLast <- maindt[date > (last_date_of_dataset - 60) & date <= (last_date_of_dataset - 30)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastMonth <- maindt[date > (last_date_of_dataset - 30)]
visitorsLastMonth <- visitorsLastMonth[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastMonth[visitor_new %in% visitorsMonthBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate30Days <- merge(visitorsMonthBeforeLast, intercept, by = "story_id")
returnRate30Days <- returnRate30Days[,.(return_rate_30days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
datamart <- merge(datamart, returnRate7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, returnRate30Days, by = "story_id", all.x = TRUE)
#Total visitors - visits
totalVisitors <- minDate[,.(total_visitors = .N, total_events = sum(total_events)), by = .(story_id)]
totalVisits <- maindt[,.(count = .N), by = .(story_id, visit_id)][,.(total_visits = .N), by = .(story_id)]
datamart <- merge(datamart, totalVisitors, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, totalVisits, by = "story_id", all.x = TRUE)
#Total chapter started
#Total chapter completed/Total chapter started
totalChapterStarted <- maindt[percentage == 20, .(total_chap_start = .N), by = .(story_id)]
totalChapterStarted <- merge(totalChapterStarted, maindt[percentage == 100, .(total_chap_complete = .N), by = .(story_id)], by = "story_id")
totalChapterStarted <- totalChapterStarted[, .(total_chap_start = total_chap_start, complete_start_ratio = round(total_chap_complete*100/total_chap_start, 2)), by = .(story_id)]
datamart <- merge(datamart, totalChapterStarted, by = "story_id", all.x = TRUE)
#Average events/visitors
#Average events/visit
aveEvents <- merge(totalVisitors, totalVisits, by = "story_id")
aveEvents <- aveEvents[, .(ave_event_visitor = round(total_events/total_visitors, 2), ave_event_visit = round(total_events/total_visits, 2)), by = .(story_id)]
datamart <- merge(datamart, aveEvents, by = "story_id", all.x = TRUE)
#Estimated active visitors (visitors with no. of events > average events/visitors)
estActiveVisitor <- minDate[total_events > mean(total_events), .(active_visitor = .N), by = .(story_id)]
#Estimated keen visitors (visitors with no. of chapter completed > 50% of available chapters)
estKeenVisitor <- maindt[, .(max_per = max(percentage)), by = .(story_id, visitor_id, chapter_number)]
estKeenVisitor <- estKeenVisitor[max_per == 100][, .(total_chap = .N, avail_chap = max(chapter_number)), by = .(story_id, visitor_id)]
estKeenVisitor <- estKeenVisitor[total_chap > avail_chap * .5][, .(keen_visitor = .N), by = .(story_id)]
#Estimated bounce visitors (visitors with no completion and idle time > 1 month)
estBounceVisitor <- maindt[, .(max_per = max(percentage), max_date = max(date)), by = .(story_id, visitor_id)]
estBounceVisitor <- estBounceVisitor[max_per < 100 & max_date < (last_date_of_dataset - 30)][, .(bounce_visitor = .N), by = .(story_id)]
visitorProfile <- merge(estActiveVisitor, estKeenVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, estBounceVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, totalVisitors, by = "story_id")
visitorProfile <- visitorProfile[,.(active_visitor = round(active_visitor*100/total_visitors, 2), keen_visitor = round(keen_visitor*100/total_visitors, 2), bounce_visitor = round(bounce_visitor*100/total_visitors, 2)), by = .(story_id)]
datamart <- merge(datamart, visitorProfile, by = "story_id", all.x = TRUE)
#Idle rate
idleRate <- maindt[, .(count = .N), by = .(story_id, date)][,.(total_active_date = .N, min_date = min(date)), by = .(story_id)]
idleRate <- idleRate[, .(idle_rate = round((1 - total_active_date/as.integer(last_date_of_dataset - min_date))*100, 2)), by = .(story_id)]
datamart <- merge(datamart, idleRate, by = "story_id", all.x = TRUE)
#Save datamart
write.csv(datamart, "/Users/tran/Desktop/Projects/Inkitt/datamart.csv")
maindt$date <- as.Date(maindt$time)
#last date of dataset (used in calculation)
last_date_of_dataset <- max(maindt$date)
listStory <- data.table(unique(maindt$story_id))
names(listStory) <- c("story_id")
#Start date
startDate <- maindt[, .(start_date = min(date)), by = story_id]
datamart <- merge(listStory, startDate, by = "story_id", all.x = TRUE)
#Average visitors in last 7 days
#Average visitors in last 30 days
#Average visitors in last 90 days
aveVisitors7Days <- maindt[date > (last_date_of_dataset - 7), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors7Days <- aveVisitors7Days[, .(ave_visitors_7days = round(.N/7, 2)), by = .(story_id)]
aveVisitors30Days <- maindt[date > (last_date_of_dataset - 30), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors30Days <- aveVisitors30Days[, .(ave_visitors_30days = round(.N/30, 2)), by = .(story_id)]
aveVisitors90Days <- maindt[date > (last_date_of_dataset - 90), .(total_events = .N), by = .(story_id, visitor_id)]
aveVisitors90Days <- aveVisitors90Days[, .(ave_visitors_90days = round(.N/90, 2)), by = .(story_id)]
datamart <- merge(datamart, aveVisitors7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, aveVisitors30Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, aveVisitors90Days, by = "story_id", all.x = TRUE)
#Acquire growth in last 7 days
#Acquire growth in last 30 days
minDate <- maindt[, .(total_events = .N, total_percentage = sum(percentage), min_date = min(date)), by = .(story_id, visitor_id)]
newVisitorsLastWeek <- minDate[min_date > (last_date_of_dataset - 7)][, .(new_visitors_new = .N), by = .(story_id)]
newVisitorsWeekBeforeLast <- minDate[min_date > (last_date_of_dataset - 14) & min_date <= (last_date_of_dataset - 7)][, .(new_visitors_old = .N), by = .(story_id)]
newVisitorsLastWeek <- merge(newVisitorsLastWeek, newVisitorsWeekBeforeLast, by = "story_id")
newVisitorsLastWeek <- newVisitorsLastWeek[, .(acq_growth_7days = round((new_visitors_new-new_visitors_old)*100/new_visitors_old, 2)), by = .(story_id)]
newVisitorsLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(new_visitors_new = .N), by = .(story_id)]
newVisitorsMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(new_visitors_old = .N), by = .(story_id)]
newVisitorsLastMonth <- merge(newVisitorsLastMonth, newVisitorsMonthBeforeLast, by = "story_id")
newVisitorsLastMonth <- newVisitorsLastMonth[, .(acq_growth_30days = round((new_visitors_new-new_visitors_old)*100/new_visitors_old, 2)), by = .(story_id)]
datamart <- merge(datamart, newVisitorsLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, newVisitorsLastMonth, by = "story_id", all.x = TRUE)
#Total percentage growth in last 7 days
#Total percentage growth in last 30 days
percentageLastWeek <- minDate[min_date > (last_date_of_dataset - 7)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageWeekBeforeLast <- minDate[min_date > (last_date_of_dataset - 14) & min_date <= (last_date_of_dataset - 7)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastWeek <- merge(percentageLastWeek, percentageWeekBeforeLast, by = "story_id")
percentageLastWeek <- percentageLastWeek[, .(percentage_growth_7days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
percentageLastMonth <- minDate[min_date > (last_date_of_dataset - 30)][, .(percentage_new = sum(total_percentage)), by = .(story_id)]
percentageMonthBeforeLast <- minDate[min_date > (last_date_of_dataset - 60) & min_date <= (last_date_of_dataset - 30)][, .(percentage_old = sum(total_percentage)), by = .(story_id)]
percentageLastMonth <- merge(percentageLastMonth, percentageMonthBeforeLast, by = "story_id")
percentageLastMonth <- percentageLastMonth[, .(percentage_growth_30days = round((percentage_new-percentage_old)*100/percentage_old, 2)), by = .(story_id)]
datamart <- merge(datamart, percentageLastWeek, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, percentageLastMonth, by = "story_id", all.x = TRUE)
#Total return rate in last 7 days
#Total return rate in last 30 days
visitorsWeekBeforeLast <- maindt[date > (last_date_of_dataset - 14) & date <= (last_date_of_dataset - 7)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastWeek <- maindt[date > (last_date_of_dataset - 7)]
visitorsLastWeek <- visitorsLastWeek[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastWeek[visitor_new %in% visitorsWeekBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsWeekBeforeLast <- visitorsWeekBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate7Days <- merge(visitorsWeekBeforeLast, intercept, by = "story_id")
returnRate7Days <- returnRate7Days[,.(return_rate_7days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
visitorsMonthBeforeLast <- maindt[date > (last_date_of_dataset - 60) & date <= (last_date_of_dataset - 30)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_old = visitor_id), by = .(story_id)]
visitorsLastMonth <- maindt[date > (last_date_of_dataset - 30)]
visitorsLastMonth <- visitorsLastMonth[,.(count = .N), by = .(story_id, visitor_id)][,.(visitor_new = visitor_id), by = .(story_id)]
intercept <- visitorsLastMonth[visitor_new %in% visitorsMonthBeforeLast$visitor_old][, .(return_visitor = .N), by = .(story_id)]
visitorsMonthBeforeLast <- visitorsMonthBeforeLast[,.(total_visitor = .N), by = .(story_id)]
returnRate30Days <- merge(visitorsMonthBeforeLast, intercept, by = "story_id")
returnRate30Days <- returnRate30Days[,.(return_rate_30days = round(return_visitor*100/total_visitor, 2)), by = .(story_id)]
datamart <- merge(datamart, returnRate7Days, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, returnRate30Days, by = "story_id", all.x = TRUE)
#Total visitors - visits
totalVisitors <- minDate[,.(total_visitors = .N, total_events = sum(total_events)), by = .(story_id)]
totalVisits <- maindt[,.(count = .N), by = .(story_id, visit_id)][,.(total_visits = .N), by = .(story_id)]
datamart <- merge(datamart, totalVisitors, by = "story_id", all.x = TRUE)
datamart <- merge(datamart, totalVisits, by = "story_id", all.x = TRUE)
#Total chapter started
#Total chapter completed/Total chapter started
totalChapterStarted <- maindt[percentage == 20, .(total_chap_start = .N), by = .(story_id)]
totalChapterStarted <- merge(totalChapterStarted, maindt[percentage == 100, .(total_chap_complete = .N), by = .(story_id)], by = "story_id")
totalChapterStarted <- totalChapterStarted[, .(total_chap_start = total_chap_start, complete_start_ratio = round(total_chap_complete*100/total_chap_start, 2)), by = .(story_id)]
datamart <- merge(datamart, totalChapterStarted, by = "story_id", all.x = TRUE)
#Average events/visitors
#Average events/visit
aveEvents <- merge(totalVisitors, totalVisits, by = "story_id")
aveEvents <- aveEvents[, .(ave_event_visitor = round(total_events/total_visitors, 2), ave_event_visit = round(total_events/total_visits, 2)), by = .(story_id)]
datamart <- merge(datamart, aveEvents, by = "story_id", all.x = TRUE)
#Estimated active visitors (visitors with no. of events > average events/visitors)
estActiveVisitor <- minDate[total_events > mean(total_events), .(active_visitor = .N), by = .(story_id)]
#Estimated keen visitors (visitors with no. of chapter completed > 50% of available chapters)
estKeenVisitor <- maindt[, .(max_per = max(percentage)), by = .(story_id, visitor_id, chapter_number)]
estKeenVisitor <- estKeenVisitor[max_per == 100][, .(total_chap = .N, avail_chap = max(chapter_number)), by = .(story_id, visitor_id)]
estKeenVisitor <- estKeenVisitor[total_chap > avail_chap * .5][, .(keen_visitor = .N), by = .(story_id)]
#Estimated bounce visitors (visitors with no completion and idle time > 1 month)
estBounceVisitor <- maindt[, .(max_per = max(percentage), max_date = max(date)), by = .(story_id, visitor_id)]
estBounceVisitor <- estBounceVisitor[max_per < 100 & max_date < (last_date_of_dataset - 30)][, .(bounce_visitor = .N), by = .(story_id)]
visitorProfile <- merge(estActiveVisitor, estKeenVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, estBounceVisitor, by = "story_id")
visitorProfile <- merge(visitorProfile, totalVisitors, by = "story_id")
visitorProfile <- visitorProfile[,.(active_visitor = round(active_visitor*100/total_visitors, 2), keen_visitor = round(keen_visitor*100/total_visitors, 2), bounce_visitor = round(bounce_visitor*100/total_visitors, 2)), by = .(story_id)]
datamart <- merge(datamart, visitorProfile, by = "story_id", all.x = TRUE)
#Idle rate
idleRate <- maindt[, .(count = .N), by = .(story_id, date)][,.(total_active_date = .N, min_date = min(date)), by = .(story_id)]
idleRate <- idleRate[, .(idle_rate = round((1 - total_active_date/as.integer(last_date_of_dataset - min_date))*100, 2)), by = .(story_id)]
datamart <- merge(datamart, idleRate, by = "story_id", all.x = TRUE)
#Save datamart
write.csv(datamart, "/Users/tran/Desktop/Projects/Inkitt/datamart.csv")
as.integer(regexpr(":", "churn:NY"))
as.integer(regexpr(".", "churn.NY"))
as.integer(regexpr("\.", "churn.NY"))
as.integer(regexpr("/.", "churn.NY"))
?regexpr
as.integer(regexpr("\\.", "churn.NY"))
install.packages("fpp")
# install.packages("fpp")
library(fpp)
library(forecast)
## =================================================
## Day 2 - Section 1
## =================================================
windows() # Create window to plot your file
plot(plastics,ylab="Sales product A")
## Decompose the components
fit = decompose(plastics,type="multiplicative")
plot(fit)
## Seasonal adjusted data
seasAdj = seasadj(fit)
par(mfrow=c(2,1))
plot(plastics)
plot(seasAdj)
## Predict rwf drift
driftFit = rwf(seasAdj,drift=T,h=24)
plot(driftFit)
## Prediction
plot(driftFit,ylim=c(500,2200))
lines(driftFit$mean*fit$figure,col="green",lwd=2)
lines(plastics,col="green",lwd=2)
dev.off() # Close plot windows
## =================================================
## Day 2 - Section 2
## =================================================
## SES in R
fit1 = ses(oil,alpha=0.2,initial="simple",h=3)
fit2 = ses(oil,alpha=0.6,initial="simple",h=3)
fit3 = ses(oil,h=3)
accuracy(fit1)
accuracy(fit2)
accuracy(fit3)
## SES predicting for books dataset
plot(books,main="Daily sales of paperback and hardcover books")
paper = books[,1]
hard = books[,2]
# Not specify alpha, model will estimate it automatically
p.fit1 = ses(paper,initial="simple",h=4)
h.fit1 = ses(hard,initial="simple",h=4)
summary(p.fit1)
summary(h.fit1)
windows()
plot(p.fit1)
plot(h.fit1)
dev.off()
## Compare between forecasting model: paperback data
p.fit1 = ses(paper,h=4)
p.fit2 = holt(paper,h=4)
p.fit3 = holt(paper,exponential=T,h=4)
p.fit4 = holt(paper,damped=T,h=4)
p.fit5 = holt(paper,damped=T,exponential=T,h=4)
summary(p.fit1)
summary(p.fit2)
summary(p.fit3)
summary(p.fit4)
summary(p.fit5)
accuracy(p.fit1)
accuracy(p.fit2)
accuracy(p.fit3)
accuracy(p.fit4)
accuracy(p.fit5)
plot(forecast(p.fit1),plot.conf=F)
plot(p.fit1)
lines(p.fit2$mean,col=2)
lines(p.fit3$mean,col=3)
lines(p.fit4$mean,col=4)
lines(p.fit5$mean,col=5)
## Compare between forecasting model: hardcover data
h.fit2 = holt(hard,h=4)
h.fit3 = holt(hard,exponential=T,h=4)
h.fit4 = holt(hard,damped=T,h=4)
h.fit5 = holt(hard,damped=T,exponential=T,h=4)
summary(h.fit1)
summary(h.fit2)
summary(h.fit3)
summary(h.fit4)
summary(h.fit5)
## =================================================
## Day 2 - Section 3
## =================================================
fit1 = ses(eggs,h=100)
fit2 = holt(eggs,h=100)
fit3 = holt(eggs,exponential=T,h=100)
fit4 = holt(eggs,damped=T,h=100)
fit5 = holt(eggs,damped=T,exponential=T,h=100)
accuracy(fit1)
accuracy(fit2)
accuracy(fit3)
accuracy(fit4)
accuracy(fit5)
plot(fit1,plot.conf=F,ylim=c(0,350))
lines(fit2$mean,col=2)
lines(fit3$mean,col=3)
lines(fit4$mean,col=4)
lines(fit5$mean,col=5)
plot(forecast(p.fit1),plot.conf=F)
plot(p.fit1)
lines(p.fit2$mean,col=2)
lines(p.fit3$mean,col=3)
lines(p.fit4$mean,col=4)
lines(p.fit5$mean,col=5)
plot(fit1,plot.conf=F,ylim=c(0,350))
lines(fit2$mean,col=2)
lines(fit3$mean,col=3)
lines(fit4$mean,col=4)
lines(fit5$mean,col=5)
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_ass')
shiny::runApp('Desktop/IESEG-MDB/Recommendation Tool/rec_assignment')
load("MovieLense2016Meta_new.rda")
setwd("~/Desktop/IESEG-MDB/Recommendation Tool/rec_assignment")
load("MovieLense2016Meta_new.rda")
str(movieInfo)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
subset(movieInfo, title %like% "miser")
subset(movieInfo, title %like% "Les")
